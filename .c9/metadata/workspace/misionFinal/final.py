{"changed":true,"filter":false,"title":"final.py","tooltip":"/misionFinal/final.py","value":"#!/usr/bin/env python\n\nimport nxt.bluesock\nimport nxt.locator\nfrom nxt.sensor import *\nfrom nxt.motor import *\nimport time\nimport math\n\nclass Robot:\n\n    def __init__(self, brick, tam_encoder=360, wheel_diameter=5.6):\n\n        self.anchoCoche = 20 #medida coche\n        self.largoCoche = 25\n        self.brick_= brick\n        self.syncMotor_ = SynchronizedMotors(Motor(self.brick_, PORT_B), Motor(self.brick_, PORT_C), 0)\n        self.arm_ = Motor(self.brick_, PORT_A)\n        self.sensorUltraSound_= Ultrasonic(self.brick_, PORT_1)\n\n        self.separationBetweenWheels_= 14\n        self.cuenta_= ((wheel_diameter*math.pi)/tam_encoder)\n        turn_perimeter = (math.pi * 2.0 * self.separationBetweenWheels_) / 4.0\n        self.cuentasGiro_ = turn_perimeter / self.cuenta_\n        self.cuentasTam_ = self.largoCoche / self.cuenta_\n\n    def mision(self):\n\n        #1. Ir en linea recta hasta encontrar un objeto\n        print \"Buscanco Hueco\"\n        self.syncMotor_.run(70)\n\n        while self.sensorUltraSound_.get_distance() < self.anchoCoche: #medida del robot            \n            pass\n        print \"Hueco Detectado\"\n        tachos = self.syncMotor_.leader.get_tacho().tacho_count\n        puedoAparcar = False\n\n        #Recorrer el hueco hasta encontrar pared\n        while self.sensorUltraSound_.get_distance() > self.largoCoche:\n\n            if self.syncMotor_.leader.get_tacho().tacho_count > tachos + self.cuentasTam_:\n                print \"He recorrido el hueco y quepo\"\n                puedoAparcar= True\n                break\n\n        print \"Voy a aparcar: \", puedoAparcar\n        self.syncMotor_.brake()\n        time.sleep(1)\n        if puedoAparcar == True:\n            self.syncMotor_.turn(-70, self.cuentasTam_/2)            \n        self.syncMotor_.brake()\n        time.sleep(1)\n        # self.syncMotor.leader.weak_turn(80, self.cuentasGiro_)\n    def testGiro(self):\n        print \"SEKE\"\nif __name__=='__main__':\n    # robot= Robot(nxt.locator.find_one_brick())\n    robot= Robot(nxt.bluesock.BlueSock('00:16:53:09:46:3B').connect())\n    # robot.mision()\n    robot.testGiro()\n\n","undoManager":{"stack":[[{"start":{"row":36,"column":0},"end":{"row":37,"column":0},"action":"remove","lines":["        print \"Tacho Inicial\",tachos",""],"id":2,"ignore":true},{"start":{"row":36,"column":24},"end":{"row":36,"column":28},"action":"remove","lines":["True"]},{"start":{"row":36,"column":24},"end":{"row":37,"column":0},"action":"insert","lines":["False",""]},{"start":{"row":38,"column":8},"end":{"row":39,"column":36},"action":"remove","lines":["print \"cuenta\", self.cuenta_","        print \"CT\", self.cuentasTam_"]},{"start":{"row":38,"column":8},"end":{"row":39,"column":0},"action":"insert","lines":["while self.sensorUltraSound_.get_distance() > largoCoche:",""]},{"start":{"row":40,"column":8},"end":{"row":40,"column":13},"action":"remove","lines":["while"]},{"start":{"row":40,"column":8},"end":{"row":40,"column":14},"action":"insert","lines":["    if"]},{"start":{"row":40,"column":62},"end":{"row":40,"column":63},"action":"remove","lines":["<"]},{"start":{"row":40,"column":62},"end":{"row":40,"column":63},"action":"insert","lines":[">"]},{"start":{"row":41,"column":12},"end":{"row":41,"column":13},"action":"remove","lines":["#"]},{"start":{"row":41,"column":12},"end":{"row":41,"column":13},"action":"insert","lines":[" "]},{"start":{"row":41,"column":15},"end":{"row":43,"column":0},"action":"remove","lines":["and self.sensorUltraSound_.get_distance() > anchoCoche","        # while self.sensorUltraSound_.get_distance() > anchoCoche: #medida del robot",""]},{"start":{"row":41,"column":15},"end":{"row":44,"column":2},"action":"insert","lines":[" print \"++++++++++++++++Hueco encontrado\"","                puedoImprimir= True","                break","  "]},{"start":{"row":44,"column":13},"end":{"row":44,"column":17},"action":"insert","lines":["   #"]},{"start":{"row":45,"column":11},"end":{"row":45,"column":17},"action":"insert","lines":["     #"]},{"start":{"row":46,"column":11},"end":{"row":46,"column":17},"action":"insert","lines":["     #"]},{"start":{"row":47,"column":0},"end":{"row":50,"column":0},"action":"remove","lines":["                pass","            pass","        print \"Tacho Final\",self.syncMotor_.leader.get_tacho().tacho_count",""]},{"start":{"row":47,"column":0},"end":{"row":49,"column":7},"action":"insert","lines":["","        print \"Aparcarmiento: \", puedoImprimir","       "]}],[{"start":{"row":0,"column":0},"end":{"row":57,"column":0},"action":"remove","lines":["#!/usr/bin/env python","","import nxt.bluesock","import nxt.locator","from nxt.sensor import *","from nxt.motor import *","import time","import math","","class Robot:","","    def __init__(self, brick, tam_encoder=360, wheel_diameter=5.6):","","        self.brick_= brick","        self.syncMotor_ = SynchronizedMotors(Motor(self.brick_, PORT_B), Motor(self.brick_, PORT_C), 0)","        self.arm_ = Motor(self.brick_, PORT_A)","        self.sensorUltraSound_= Ultrasonic(self.brick_, PORT_1)","","        self.separationBetweenWheels_= 14","        self.cuenta_= ((wheel_diameter*math.pi)/tam_encoder)","        turn_perimeter = (math.pi * 2.0 * self.separationBetweenWheels_) / 4.0","        self.cuentasGiro_ = turn_perimeter / self.cuenta_","        self.cuentasTam_ = 30.0 / self.cuenta_","","    def mision(self):","","        #1. Ir en linea recta hasta encontrar un objeto","        print \"Buscanco Hueco\"","        self.syncMotor_.run(70)","        anchoCoche = 25 #medida coche","        largoCoche = 30","        while self.sensorUltraSound_.get_distance() < anchoCoche: #medida del robot","            # print self.sensorUltraSound_.get_distance()","            pass","        print \"Hueco Detectado\"","        tachos = self.syncMotor_.leader.get_tacho().tacho_count","        puedoImprimir = False","","        while self.sensorUltraSound_.get_distance() > largoCoche:","","            if self.syncMotor_.leader.get_tacho().tacho_count > tachos + self.cuentasTam_:","                print \"++++++++++++++++Hueco encontrado\"","                puedoImprimir= True","                break","                # if puedoImprimir:","                #     print \"Hueco Vacio\"","                #     puedoImprimir = False","","        print \"Aparcarmiento: \", puedoImprimir","       ","        self.syncMotor_.brake()","        time.sleep(1)","","if __name__=='__main__':","    robot= Robot(nxt.locator.find_one_brick())","    #robot= Robot(nxt.bluesock.BlueSock('00:16:53:09:46:3B').connect())","    robot.mision()",""],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":62,"column":0},"action":"insert","lines":["#!/usr/bin/env python","","import nxt.bluesock","import nxt.locator","from nxt.sensor import *","from nxt.motor import *","import time","import math","","class Robot:","","    def __init__(self, brick, tam_encoder=360, wheel_diameter=5.6):","","        self.anchoCoche = 20 #medida coche","        self.largoCoche = 25","        self.brick_= brick","        self.syncMotor_ = SynchronizedMotors(Motor(self.brick_, PORT_B), Motor(self.brick_, PORT_C), 0)","        self.arm_ = Motor(self.brick_, PORT_A)","        self.sensorUltraSound_= Ultrasonic(self.brick_, PORT_1)","","        self.separationBetweenWheels_= 14","        self.cuenta_= ((wheel_diameter*math.pi)/tam_encoder)","        turn_perimeter = (math.pi * 2.0 * self.separationBetweenWheels_) / 4.0","        self.cuentasGiro_ = turn_perimeter / self.cuenta_","        self.cuentasTam_ = self.largoCoche / self.cuenta_","","    def mision(self):","","        #1. Ir en linea recta hasta encontrar un objeto","        print \"Buscanco Hueco\"","        self.syncMotor_.run(70)","","        while self.sensorUltraSound_.get_distance() < self.anchoCoche: #medida del robot            ","            pass","        print \"Hueco Detectado\"","        tachos = self.syncMotor_.leader.get_tacho().tacho_count","        puedoAparcar = False","","        #Recorrer el hueco hasta encontrar pared","        while self.sensorUltraSound_.get_distance() > self.largoCoche:","","            if self.syncMotor_.leader.get_tacho().tacho_count > tachos + self.cuentasTam_:","                print \"He recorrido el hueco y quepo\"","                puedoAparcar= True","                break","","        print \"Voy a aparcar: \", puedoAparcar","        self.syncMotor_.brake()","        time.sleep(1)","        if puedoAparcar == True:","            self.syncMotor_.turn(-70, self.cuentasTam_/2)            ","        self.syncMotor_.brake()","        time.sleep(1)","        # self.syncMotor.leader.weak_turn(80, self.cuentasGiro_)","    def testGiro(self):","        print \"SEKE\"","if __name__=='__main__':","    # robot= Robot(nxt.locator.find_one_brick())","    robot= Robot(nxt.bluesock.BlueSock('00:16:53:09:46:3B').connect())","    # robot.mision()","    robot.testGiro()","",""],"id":4}]],"mark":0,"position":2},"ace":{"folds":[],"scrolltop":161.75,"scrollleft":0,"selection":{"start":{"row":62,"column":0},"end":{"row":62,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":7,"state":"start","mode":"ace/mode/python"}},"timestamp":1431420990278}