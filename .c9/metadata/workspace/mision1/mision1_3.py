{"filter":false,"title":"mision1_3.py","tooltip":"/mision1/mision1_3.py","undoManager":{"stack":[[{"start":{"row":75,"column":0},"end":{"row":76,"column":19},"action":"remove","lines":["\t\tself.sonMotor = Motor(brick, PORT_C)","\t\tself.syncMotor = "],"id":16}],[{"start":{"row":73,"column":0},"end":{"row":75,"column":1},"action":"remove","lines":["\t\t","\t\tself.dadMotor =","\t"],"id":17}],[{"start":{"row":74,"column":0},"end":{"row":76,"column":0},"action":"remove","lines":["","\t\tself.arm = Motor(brick, PORT_A)\t",""],"id":18}],[{"start":{"row":73,"column":0},"end":{"row":74,"column":0},"action":"remove","lines":["",""],"id":19}],[{"start":{"row":20,"column":38},"end":{"row":20,"column":50},"action":"remove","lines":["self.dadMoto"],"id":20}],[{"start":{"row":20,"column":38},"end":{"row":20,"column":39},"action":"remove","lines":["r"],"id":21}],[{"start":{"row":20,"column":38},"end":{"row":20,"column":59},"action":"insert","lines":[" Motor(brick, PORT_B)"],"id":22}],[{"start":{"row":20,"column":73},"end":{"row":20,"column":74},"action":"remove","lines":["r"],"id":23}],[{"start":{"row":20,"column":72},"end":{"row":20,"column":73},"action":"remove","lines":["o"],"id":24}],[{"start":{"row":20,"column":71},"end":{"row":20,"column":72},"action":"remove","lines":["t"],"id":25}],[{"start":{"row":20,"column":70},"end":{"row":20,"column":71},"action":"remove","lines":["o"],"id":26}],[{"start":{"row":20,"column":69},"end":{"row":20,"column":70},"action":"remove","lines":["M"],"id":27},{"start":{"row":20,"column":68},"end":{"row":20,"column":69},"action":"remove","lines":["n"]}],[{"start":{"row":20,"column":67},"end":{"row":20,"column":68},"action":"remove","lines":["o"],"id":28}],[{"start":{"row":20,"column":66},"end":{"row":20,"column":67},"action":"remove","lines":["s"],"id":29}],[{"start":{"row":20,"column":65},"end":{"row":20,"column":66},"action":"remove","lines":["."],"id":30}],[{"start":{"row":20,"column":64},"end":{"row":20,"column":65},"action":"remove","lines":["f"],"id":31}],[{"start":{"row":20,"column":63},"end":{"row":20,"column":64},"action":"remove","lines":["l"],"id":32}],[{"start":{"row":20,"column":62},"end":{"row":20,"column":63},"action":"remove","lines":["e"],"id":33}],[{"start":{"row":20,"column":61},"end":{"row":20,"column":62},"action":"remove","lines":["s"],"id":34}],[{"start":{"row":20,"column":60},"end":{"row":20,"column":61},"action":"remove","lines":[" "],"id":35}],[{"start":{"row":20,"column":60},"end":{"row":20,"column":61},"action":"insert","lines":[" "],"id":36}],[{"start":{"row":20,"column":61},"end":{"row":20,"column":82},"action":"insert","lines":[" Motor(brick, PORT_B)"],"id":37}],[{"start":{"row":20,"column":80},"end":{"row":20,"column":81},"action":"remove","lines":["B"],"id":38}],[{"start":{"row":20,"column":80},"end":{"row":20,"column":81},"action":"insert","lines":["C"],"id":39}],[{"start":{"row":20,"column":38},"end":{"row":20,"column":39},"action":"remove","lines":[" "],"id":40}],[{"start":{"row":21,"column":16},"end":{"row":21,"column":17},"action":"remove","lines":["e"],"id":41}],[{"start":{"row":21,"column":15},"end":{"row":21,"column":16},"action":"remove","lines":["n"],"id":42}],[{"start":{"row":21,"column":14},"end":{"row":21,"column":15},"action":"remove","lines":["o"],"id":43}],[{"start":{"row":21,"column":13},"end":{"row":21,"column":14},"action":"remove","lines":["N"],"id":44}],[{"start":{"row":21,"column":13},"end":{"row":21,"column":34},"action":"insert","lines":[" Motor(brick, PORT_B)"],"id":45}],[{"start":{"row":21,"column":32},"end":{"row":21,"column":33},"action":"remove","lines":["B"],"id":46}],[{"start":{"row":21,"column":32},"end":{"row":21,"column":33},"action":"insert","lines":["A"],"id":47}],[{"start":{"row":15,"column":6},"end":{"row":15,"column":7},"action":"remove","lines":["r"],"id":48}],[{"start":{"row":15,"column":6},"end":{"row":15,"column":7},"action":"insert","lines":["R"],"id":49}],[{"start":{"row":16,"column":1},"end":{"row":16,"column":20},"action":"remove","lines":["def __init__(self):"],"id":50}],[{"start":{"row":16,"column":1},"end":{"row":17,"column":0},"action":"insert","lines":["",""],"id":51},{"start":{"row":17,"column":0},"end":{"row":17,"column":1},"action":"insert","lines":["\t"]}],[{"start":{"row":17,"column":1},"end":{"row":17,"column":64},"action":"insert","lines":["def __init__(self, brick, tam_encoder=360, wheel_diameter=5.6):"],"id":52}],[{"start":{"row":9,"column":0},"end":{"row":13,"column":51},"action":"remove","lines":["def connect(mode, mac):","    if(mode==\"Usb\"):","        return nxt.locator.find_one_brick()","    else:","        return nxt.bluesock.BlueSock(mac).connect()"],"id":53}],[{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"remove","lines":["",""],"id":54}],[{"start":{"row":9,"column":0},"end":{"row":10,"column":0},"action":"remove","lines":["",""],"id":55}],[{"start":{"row":14,"column":17},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":56},{"start":{"row":15,"column":0},"end":{"row":15,"column":2},"action":"insert","lines":["\t\t"]}],[{"start":{"row":15,"column":2},"end":{"row":15,"column":35},"action":"insert","lines":["self.separationBetweenWheels_= 13"],"id":57}],[{"start":{"row":17,"column":35},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":58},{"start":{"row":18,"column":0},"end":{"row":18,"column":2},"action":"insert","lines":["\t\t"]}],[{"start":{"row":18,"column":2},"end":{"row":19,"column":0},"action":"insert","lines":["",""],"id":59},{"start":{"row":19,"column":0},"end":{"row":19,"column":2},"action":"insert","lines":["\t\t"]}],[{"start":{"row":19,"column":2},"end":{"row":26,"column":0},"action":"insert","lines":["self.cuenta_= ((wheel_diameter*math.pi)/tam_encoder)","","        # 1. Calculamos las cuentas que tendra que pasar para girar hacia un stolado.","        # Si suponemos que un giro sobre si mismo es de de radio separationBewteenWheels, un giro solo ocupara una","        # cuarta parte del perimetro de la circunferencia.","        turn_perimeter = (math.pi * 2.0 * self.separationBetweenWheels_) / 4.0","        self.cuentasGiro_ = turn_perimeter / self.cuenta_",""],"id":60}],[{"start":{"row":71,"column":3},"end":{"row":72,"column":43},"action":"remove","lines":["self.dadMotor.turn(direction * -100, 180)","\t\t\tself.sonMotor.turn(direction * 100, 180)"],"id":61}],[{"start":{"row":71,"column":3},"end":{"row":71,"column":58},"action":"insert","lines":["self.syncMotor_.leader.weak_turn(80, self.cuentasGiro_)"],"id":62}],[{"start":{"row":73,"column":3},"end":{"row":74,"column":45},"action":"remove","lines":["self.dadMotor.turn(direction * 100, 180)","\t\t\tself.sonMotor.turn(direction * -100, 180)\t"],"id":63},{"start":{"row":73,"column":3},"end":{"row":73,"column":58},"action":"insert","lines":["self.syncMotor_.leader.weak_turn(80, self.cuentasGiro_)"]}],[{"start":{"row":73,"column":23},"end":{"row":73,"column":24},"action":"remove","lines":["e"],"id":64}],[{"start":{"row":73,"column":22},"end":{"row":73,"column":23},"action":"remove","lines":["d"],"id":65}],[{"start":{"row":73,"column":21},"end":{"row":73,"column":22},"action":"remove","lines":["a"],"id":66}],[{"start":{"row":73,"column":21},"end":{"row":73,"column":22},"action":"remove","lines":["r"],"id":67}],[{"start":{"row":73,"column":20},"end":{"row":73,"column":21},"action":"remove","lines":["e"],"id":68}],[{"start":{"row":73,"column":19},"end":{"row":73,"column":20},"action":"remove","lines":["l"],"id":69}],[{"start":{"row":73,"column":19},"end":{"row":73,"column":20},"action":"insert","lines":["f"],"id":70}],[{"start":{"row":73,"column":20},"end":{"row":73,"column":21},"action":"insert","lines":["o"],"id":71}],[{"start":{"row":73,"column":21},"end":{"row":73,"column":22},"action":"insert","lines":["l"],"id":72}],[{"start":{"row":73,"column":22},"end":{"row":73,"column":23},"action":"insert","lines":["l"],"id":73}],[{"start":{"row":73,"column":23},"end":{"row":73,"column":24},"action":"insert","lines":["o"],"id":74}],[{"start":{"row":73,"column":24},"end":{"row":73,"column":25},"action":"insert","lines":["w"],"id":75}],[{"start":{"row":73,"column":25},"end":{"row":73,"column":26},"action":"insert","lines":["e"],"id":76}],[{"start":{"row":73,"column":26},"end":{"row":73,"column":27},"action":"insert","lines":["r"],"id":77}],[{"start":{"row":73,"column":39},"end":{"row":73,"column":40},"action":"remove","lines":["0"],"id":78}],[{"start":{"row":73,"column":38},"end":{"row":73,"column":39},"action":"remove","lines":["8"],"id":79}],[{"start":{"row":73,"column":38},"end":{"row":73,"column":39},"action":"insert","lines":["s"],"id":80}],[{"start":{"row":73,"column":39},"end":{"row":73,"column":40},"action":"insert","lines":["e"],"id":81}],[{"start":{"row":73,"column":40},"end":{"row":73,"column":41},"action":"insert","lines":["l"],"id":82}],[{"start":{"row":73,"column":41},"end":{"row":73,"column":42},"action":"insert","lines":["f"],"id":83}],[{"start":{"row":73,"column":42},"end":{"row":73,"column":43},"action":"insert","lines":["."],"id":84}],[{"start":{"row":73,"column":43},"end":{"row":73,"column":44},"action":"insert","lines":["p"],"id":85}],[{"start":{"row":73,"column":44},"end":{"row":73,"column":45},"action":"insert","lines":["o"],"id":86}],[{"start":{"row":73,"column":45},"end":{"row":73,"column":46},"action":"insert","lines":["w"],"id":87}],[{"start":{"row":73,"column":46},"end":{"row":73,"column":47},"action":"insert","lines":["e"],"id":88}],[{"start":{"row":73,"column":47},"end":{"row":73,"column":48},"action":"insert","lines":["r"],"id":89}],[{"start":{"row":71,"column":37},"end":{"row":71,"column":38},"action":"remove","lines":["0"],"id":90}],[{"start":{"row":71,"column":36},"end":{"row":71,"column":37},"action":"remove","lines":["8"],"id":91}],[{"start":{"row":71,"column":36},"end":{"row":71,"column":37},"action":"insert","lines":["s"],"id":92}],[{"start":{"row":71,"column":37},"end":{"row":71,"column":38},"action":"insert","lines":["e"],"id":93}],[{"start":{"row":71,"column":38},"end":{"row":71,"column":39},"action":"insert","lines":["l"],"id":94}],[{"start":{"row":71,"column":39},"end":{"row":71,"column":40},"action":"insert","lines":["f"],"id":95}],[{"start":{"row":71,"column":40},"end":{"row":71,"column":41},"action":"insert","lines":["."],"id":96}],[{"start":{"row":71,"column":41},"end":{"row":71,"column":42},"action":"insert","lines":["p"],"id":97}],[{"start":{"row":71,"column":42},"end":{"row":71,"column":43},"action":"insert","lines":["o"],"id":98}],[{"start":{"row":71,"column":43},"end":{"row":71,"column":44},"action":"insert","lines":["w"],"id":99}],[{"start":{"row":71,"column":44},"end":{"row":71,"column":45},"action":"insert","lines":["e"],"id":100}],[{"start":{"row":71,"column":45},"end":{"row":71,"column":46},"action":"insert","lines":["r"],"id":101}],[{"start":{"row":75,"column":22},"end":{"row":75,"column":23},"action":"remove","lines":["k"],"id":102}],[{"start":{"row":75,"column":21},"end":{"row":75,"column":22},"action":"remove","lines":["c"],"id":103}],[{"start":{"row":75,"column":20},"end":{"row":75,"column":21},"action":"remove","lines":["i"],"id":104}],[{"start":{"row":75,"column":19},"end":{"row":75,"column":20},"action":"remove","lines":["r"],"id":105}],[{"start":{"row":75,"column":18},"end":{"row":75,"column":19},"action":"remove","lines":["b"],"id":106}],[{"start":{"row":75,"column":17},"end":{"row":75,"column":18},"action":"remove","lines":[" "],"id":107}],[{"start":{"row":75,"column":16},"end":{"row":75,"column":17},"action":"remove","lines":[","],"id":108}],[{"start":{"row":71,"column":17},"end":{"row":71,"column":18},"action":"remove","lines":["_"],"id":109}],[{"start":{"row":73,"column":17},"end":{"row":73,"column":18},"action":"remove","lines":["_"],"id":110}],[{"start":{"row":0,"column":0},"end":{"row":142,"column":0},"action":"remove","lines":["#!/usr/bin/env python","","import nxt.bluesock","from nxt.motor import *","import time","import msvcrt","","# brick = connect('00:16:53:09:46:3B')","","class Robot:","\t","\tdef __init__(self, brick, tam_encoder=360, wheel_diameter=5.6):","\t\t# vector de estados, [mov+,mov-] para saber en que direccion acelerar","\t\tself.vState = [False, False]","\t\tself.power = 60","\t\tself.separationBetweenWheels_= 13","\t\tself.syncMotor = SynchronizedMotors(Motor(brick, PORT_B),  Motor(brick, PORT_C), 0)","\t\tself.arm =  Motor(brick, PORT_A)\t","\t\t","\t\tself.cuenta_= ((wheel_diameter*math.pi)/tam_encoder)","","        # 1. Calculamos las cuentas que tendra que pasar para girar hacia un stolado.","        # Si suponemos que un giro sobre si mismo es de de radio separationBewteenWheels, un giro solo ocupara una","        # cuarta parte del perimetro de la circunferencia.","        turn_perimeter = (math.pi * 2.0 * self.separationBetweenWheels_) / 4.0","        self.cuentasGiro_ = turn_perimeter / self.cuenta_","","","\tdef move(self, direction):","","\t\t# vState[0] mov+ vState[1] mov-\t","","\t\tif(direction == 1):","\t\t\tif(not self.vState[0] and not self.vState[1]):","\t\t\t\tself.power = 60","\t\t\tif(self.vState[1]):","\t\t\t\tself.power *= -1\t\t","","\t\t\tself.vState[0] = True","\t\t\tself.vState[1] = False","","\t\tif(direction == -1):","\t\t\tif(not self.vState[0] and not self.vState[1]):","\t\t\t\tself.power = -60","\t\t\tif(self.vState[0]):\t","\t\t\t\tself.power *= direction","","","\t\t\tself.vState[0] = False","\t\t\tself.vState[1] = True","\t\t","\t\tself.syncMotor.brake()","\t\tself.syncMotor.run(self.power)","","\t# Dependiendo de la direccion, acelera o decelera","\tdef speed(self, direction):","","\t\tif(self.vState[0]):","\t\t\tif(self.power < 120 and self.power > 0):","\t\t\t\tself.power = self.power + 5 * direction","\t\telif(self.vState[1]):","\t\t\tif(self.power < 0 and self.power > -120):","\t\t\t\tself.power = self.power - 5 * direction","\t\telse:","\t\t\treturn","\t\tself.syncMotor.brake()","\t\tself.syncMotor.run(self.power)","","\tdef turn(self, direction):","","\t\tif(self.vState[1]):","\t\t\tself.syncMotor.leader.weak_turn(self.power, self.cuentasGiro_)","\t\telse:","\t\t\tself.syncMotor.follower.weak_turn(self.power, self.cuentasGiro_)","","\tdef mision(self):","","\t# funcion motor.idle, para pero tambien desincroniza","\t\tprint \"*Ordenes para el robot:\"","\t\tprint \"\tW o S \tavanzar o retroceder\"","\t\tprint \"\tA o D \tgirar\"","\t\tprint \"\tQ o E \tmover el brazo\"","\t\tprint \"\tEspacio \tparar\"","\t\tprint \"\t+ o - \tacelerar\"","\t\tprint \"\tP para salir del programa\"","","\t\twhile True:","\t\t\tif msvcrt.kbhit():","\t\t\t\tkey = msvcrt.getch()","","\t\t\t\t# Movimiento ","\t\t\t\tif(key == 'w'):","\t\t\t\t\tself.move(1)","\t\t\t\telif(key == 's'):","\t\t\t\t\tself.move(-1)","","\t\t\t\t# Girar a la derecha","\t\t\t\telif(key == 'a'):","\t\t\t\t\tself.turn(1)","\t\t\t\t# Girar a la izquierda","\t\t\t\telif(key == 'd'):","\t\t\t\t\tself.turn(-1)","","\t\t\t\t# Brazo arriba","\t\t\t\telif(key == 'q'):\t\t\t\t\t\t\t\t\t","\t\t\t\t\t","\t\t\t\t\ttry:","\t\t\t\t\t\tself.arm.turn(40, 50)","\t\t\t\t\texcept ValueError:","\t\t\t\t\t\tprint \"seke\"","","\t\t\t\t# Brazo abajo","\t\t\t\telif(key == 'e'):\t","\t\t\t\t\ttry:\t\t\t\t\t\t","\t\t\t\t\t\tself.arm.turn(-40, 50)","\t\t\t\t\texcept ValueError:","\t\t\t\t\t\tprint \"seke\"","","\t\t\t\t# Parar o activar motor","\t\t\t\telif(key == ' '):","\t\t\t\t\tif(self.vState[0] or self.vState[1]):","\t\t\t\t\t\tself.vState[0] = self.vState[1] = False","\t\t\t\t\t\tself.syncMotor.brake()","\t\t\t\t\telse:","\t\t\t\t\t\tself.vState[0] = True","\t\t\t\t\t\tself.power = 60","\t\t\t\t\t\tself.syncMotor.run(self.power)\t","","\t\t\t\t#Cerrar programa","\t\t\t\telif(key == 'p'):","\t\t\t\t\tself.syncMotor.brake()","\t\t\t\t\tself.arm.brake()","\t\t\t\t\tbreak","","\t\t\t\t# Acelerar","\t\t\t\telif(key == '+'):","\t\t\t\t\tself.speed(1)","","\t\t\t\telif(key == '-'):","\t\t\t\t\tself.speed(-1)","\t    \t","",""],"id":111},{"start":{"row":0,"column":0},"end":{"row":155,"column":0},"action":"insert","lines":["#!/usr/bin/env python","","import nxt.bluesock","from nxt.motor import *","import time","import msvcrt","import math","","def connect(mode, mac):","    if(mode==\"Usb\"):","        return nxt.locator.find_one_brick()","    else:","        return nxt.bluesock.BlueSock(mac).connect()","","# brick = connect('00:16:53:09:46:3B')","","class Robot:","\t","\tdef __init__(self, brick, tam_encoder=360, wheel_diameter=5.6):","\t\t# vector de estados, [mov+,mov-] para saber en que direccion acelerar","\t\tself.vState = [False, False]","\t\tself.power = 60","\t\tself.separationBetweenWheels_ = 13","\t\tself.syncMotor = SynchronizedMotors(Motor(brick, PORT_B),  Motor(brick, PORT_C), 0)","\t\tself.arm =  Motor(brick, PORT_A)\t","\t\t","\t\tself.cuenta_= ((wheel_diameter*math.pi)/tam_encoder)","","        # 1. Calculamos las cuentas que tendra que pasar para girar hacia un stolado.","        # Si suponemos que un giro sobre si mismo es de de radio separationBewteenWheels, un giro solo ocupara una","        # cuarta parte del perimetro de la circunferencia.","\t\tself.turn_perimeter = (math.pi * 2.0 * self.separationBetweenWheels_) / 4.0","\t\tself.cuentasGiro_ = self.turn_perimeter / self.cuenta_","","","\tdef move(self, direction):","","\t\t# vState[0] mov+ vState[1] mov-\t","","\t\tif(direction == 1):","\t\t\tif(not self.vState[0] and not self.vState[1]):","\t\t\t\tself.power = 60","\t\t\tif(self.vState[1]):","\t\t\t\tself.power *= -1\t\t","","\t\t\tself.vState[0] = True","\t\t\tself.vState[1] = False","","\t\tif(direction == -1):","\t\t\tif(not self.vState[0] and not self.vState[1]):","\t\t\t\tself.power = -60","\t\t\tif(self.vState[0]):\t","\t\t\t\tself.power *= direction","","","\t\t\tself.vState[0] = False","\t\t\tself.vState[1] = True","\t\t","\t\tself.syncMotor.brake()","\t\tself.syncMotor.run(self.power)","","\t# Dependiendo de la direccion, acelera o decelera","\tdef speed(self, direction):","","\t\tif(self.vState[0]):\t","\t\t\tif(self.power < 120 and self.power > 0):","\t\t\t\tself.power = self.power + 5 * direction","\t\telif(self.vState[1]):","\t\t\tif(self.power < 0 and self.power > -120):","\t\t\t\tself.power = self.power - 5 * direction","\t\telse:","\t\t\treturn","\t\tself.syncMotor.brake()","\t\tself.syncMotor.run(self.power)","","\tdef turn(self, direction):","","\t\tif(self.vState[1]):","\t\t\tself.syncMotor.leader.weak_turn(self.power, self.cuentasGiro_)","\t\telse:","\t\t\tself.syncMotor.follower.weak_turn(self.power, self.cuentasGiro_)","","\tdef stop(self):","\t\tif(self.vState[0] or self.vState[1]):","\t\t\tself.vState[0] = self.vState[1] = False","\t\t\tself.syncMotor.brake()","\t\telse:","\t\t\tself.vState[0] = True","\t\t\tself.power = 60","\t\t\tself.syncMotor.run(self.power)","\tdef hello(self, event):","\t\tprint \"HELLO ROBOT\"\t\t","","\t# def mision(self, event):","","\t# # funcion motor.idle, para pero tambien desincroniza","\t# \tprint \"*Ordenes para el robot:\"","\t# \tprint \"\tW o S \tavanzar o retroceder\"","\t# \tprint \"\tA o D \tgirar\"","\t# \tprint \"\tQ o E \tmover el brazo\"","\t# \tprint \"\tEspacio \tparar\"","\t# \tprint \"\t+ o - \tacelerar\"","\t# \tprint \"\tP para salir del programa\"","","\t# \twhile True:","\t# \t\tif msvcrt.kbhit():","\t# \t\t\tkey = msvcrt.getch()","","\t# \t\t\t# Movimiento ","\t# \t\t\tif(key == 'w'):","\t# \t\t\t\tself.move(1)","\t# \t\t\telif(key == 's'):","\t# \t\t\t\tself.move(-1)","","\t# \t\t\t# Girar a la derecha","\t# \t\t\telif(key == 'a'):","\t# \t\t\t\tself.turn(1)","\t# \t\t\t# Girar a la izquierda","\t# \t\t\telif(key == 'd'):","\t# \t\t\t\tself.turn(-1)","","\t# \t\t\t# Brazo arriba","\t# \t\t\telif(key == 'q'):\t\t\t\t\t\t\t\t\t","\t\t\t\t\t","\t# \t\t\t\ttry:","\t# \t\t\t\t\tself.arm.turn(40, 50)","\t# \t\t\t\texcept ValueError:","\t# \t\t\t\t\tprint \"seke\"","","\t# \t\t\t# Brazo abajo","\t# \t\t\telif(key == 'e'):\t","\t# \t\t\t\ttry:\t\t\t\t\t\t","\t# \t\t\t\t\tself.arm.turn(-40, 50)","\t# \t\t\t\texcept ValueError:","\t# \t\t\t\t\tprint \"seke\"","","\t# \t\t\t# Parar o activar motor","\t# \t\t\telif(key == ' '):","\t# \t\t\t\tself.stop()","","","\t# \t\t\t#Cerrar programa","\t# \t\t\telif(key == 'p'):","\t# \t\t\t\tself.syncMotor.brake()","\t# \t\t\t\tself.arm.brake()","\t# \t\t\t\tbreak","","\t# \t\t\t# Acelerar","\t# \t\t\telif(key == '+'):","\t# \t\t\t\tself.speed(1)","","\t# \t\t\telif(key == '-'):","\t# \t\t\t\tself.speed(-1)","\t    \t","",""]}],[{"start":{"row":90,"column":0},"end":{"row":91,"column":23},"action":"remove","lines":["\tdef hello(self, event):","\t\tprint \"HELLO ROBOT\"\t\t"],"id":112}],[{"start":{"row":89,"column":33},"end":{"row":90,"column":0},"action":"remove","lines":["",""],"id":113}],[{"start":{"row":13,"column":0},"end":{"row":14,"column":38},"action":"remove","lines":["","# brick = connect('00:16:53:09:46:3B')"],"id":114,"ignore":true}],[{"start":{"row":12,"column":51},"end":{"row":13,"column":0},"action":"remove","lines":["",""],"id":115,"ignore":true}],[{"start":{"row":0,"column":0},"end":{"row":151,"column":0},"action":"remove","lines":["#!/usr/bin/env python","","import nxt.bluesock","from nxt.motor import *","import time","import msvcrt","import math","","def connect(mode, mac):","    if(mode==\"Usb\"):","        return nxt.locator.find_one_brick()","    else:","        return nxt.bluesock.BlueSock(mac).connect()","","class Robot:","\t","\tdef __init__(self, brick, tam_encoder=360, wheel_diameter=5.6):","\t\t# vector de estados, [mov+,mov-] para saber en que direccion acelerar","\t\tself.vState = [False, False]","\t\tself.power = 60","\t\tself.separationBetweenWheels_ = 13","\t\tself.syncMotor = SynchronizedMotors(Motor(brick, PORT_B),  Motor(brick, PORT_C), 0)","\t\tself.arm =  Motor(brick, PORT_A)\t","\t\t","\t\tself.cuenta_= ((wheel_diameter*math.pi)/tam_encoder)","","        # 1. Calculamos las cuentas que tendra que pasar para girar hacia un stolado.","        # Si suponemos que un giro sobre si mismo es de de radio separationBewteenWheels, un giro solo ocupara una","        # cuarta parte del perimetro de la circunferencia.","\t\tself.turn_perimeter = (math.pi * 2.0 * self.separationBetweenWheels_) / 4.0","\t\tself.cuentasGiro_ = self.turn_perimeter / self.cuenta_","","","\tdef move(self, direction):","","\t\t# vState[0] mov+ vState[1] mov-\t","","\t\tif(direction == 1):","\t\t\tif(not self.vState[0] and not self.vState[1]):","\t\t\t\tself.power = 60","\t\t\tif(self.vState[1]):","\t\t\t\tself.power *= -1\t\t","","\t\t\tself.vState[0] = True","\t\t\tself.vState[1] = False","","\t\tif(direction == -1):","\t\t\tif(not self.vState[0] and not self.vState[1]):","\t\t\t\tself.power = -60","\t\t\tif(self.vState[0]):\t","\t\t\t\tself.power *= direction","","","\t\t\tself.vState[0] = False","\t\t\tself.vState[1] = True","\t\t","\t\tself.syncMotor.brake()","\t\tself.syncMotor.run(self.power)","","\t# Dependiendo de la direccion, acelera o decelera","\tdef speed(self, direction):","","\t\tif(self.vState[0]):\t","\t\t\tif(self.power < 120 and self.power > 0):","\t\t\t\tself.power = self.power + 5 * direction","\t\telif(self.vState[1]):","\t\t\tif(self.power < 0 and self.power > -120):","\t\t\t\tself.power = self.power - 5 * direction","\t\telse:","\t\t\treturn","\t\tself.syncMotor.brake()","\t\tself.syncMotor.run(self.power)","","\tdef turn(self, direction):","","\t\tif(self.vState[1]):","\t\t\tself.syncMotor.leader.weak_turn(self.power, self.cuentasGiro_)","\t\telse:","\t\t\tself.syncMotor.follower.weak_turn(self.power, self.cuentasGiro_)","","\tdef stop(self):","\t\tif(self.vState[0] or self.vState[1]):","\t\t\tself.vState[0] = self.vState[1] = False","\t\t\tself.syncMotor.brake()","\t\telse:","\t\t\tself.vState[0] = True","\t\t\tself.power = 60","\t\t\tself.syncMotor.run(self.power)","","\t# def mision(self, event):","","\t# # funcion motor.idle, para pero tambien desincroniza","\t# \tprint \"*Ordenes para el robot:\"","\t# \tprint \"\tW o S \tavanzar o retroceder\"","\t# \tprint \"\tA o D \tgirar\"","\t# \tprint \"\tQ o E \tmover el brazo\"","\t# \tprint \"\tEspacio \tparar\"","\t# \tprint \"\t+ o - \tacelerar\"","\t# \tprint \"\tP para salir del programa\"","","\t# \twhile True:","\t# \t\tif msvcrt.kbhit():","\t# \t\t\tkey = msvcrt.getch()","","\t# \t\t\t# Movimiento ","\t# \t\t\tif(key == 'w'):","\t# \t\t\t\tself.move(1)","\t# \t\t\telif(key == 's'):","\t# \t\t\t\tself.move(-1)","","\t# \t\t\t# Girar a la derecha","\t# \t\t\telif(key == 'a'):","\t# \t\t\t\tself.turn(1)","\t# \t\t\t# Girar a la izquierda","\t# \t\t\telif(key == 'd'):","\t# \t\t\t\tself.turn(-1)","","\t# \t\t\t# Brazo arriba","\t# \t\t\telif(key == 'q'):\t\t\t\t\t\t\t\t\t","\t\t\t\t\t","\t# \t\t\t\ttry:","\t# \t\t\t\t\tself.arm.turn(40, 50)","\t# \t\t\t\texcept ValueError:","\t# \t\t\t\t\tprint \"seke\"","","\t# \t\t\t# Brazo abajo","\t# \t\t\telif(key == 'e'):\t","\t# \t\t\t\ttry:\t\t\t\t\t\t","\t# \t\t\t\t\tself.arm.turn(-40, 50)","\t# \t\t\t\texcept ValueError:","\t# \t\t\t\t\tprint \"seke\"","","\t# \t\t\t# Parar o activar motor","\t# \t\t\telif(key == ' '):","\t# \t\t\t\tself.stop()","","","\t# \t\t\t#Cerrar programa","\t# \t\t\telif(key == 'p'):","\t# \t\t\t\tself.syncMotor.brake()","\t# \t\t\t\tself.arm.brake()","\t# \t\t\t\tbreak","","\t# \t\t\t# Acelerar","\t# \t\t\telif(key == '+'):","\t# \t\t\t\tself.speed(1)","","\t# \t\t\telif(key == '-'):","\t# \t\t\t\tself.speed(-1)","\t    \t","",""],"id":116},{"start":{"row":0,"column":0},"end":{"row":90,"column":0},"action":"insert","lines":["#!/usr/bin/env python","","import nxt.bluesock","from nxt.motor import *","import time","import msvcrt","import math","","def connect(mode, mac):","    if(mode==\"Usb\"):","        return nxt.locator.find_one_brick()","    else:","        return nxt.bluesock.BlueSock(mac).connect()","","# brick = connect('00:16:53:09:46:3B')","","class Robot:","\t","\tdef __init__(self, brick, tam_encoder=360, wheel_diameter=5.6):","\t\t# vector de estados, [mov+,mov-] para saber en que direccion acelerar","\t\tself.vState = [False, False]","\t\tself.power = 60","\t\tself.separationBetweenWheels_ = 13","\t\tself.syncMotor = SynchronizedMotors(Motor(brick, PORT_B),  Motor(brick, PORT_C), 0)","\t\tself.arm =  Motor(brick, PORT_A)\t","\t\t","\t\tself.cuenta_= ((wheel_diameter*math.pi)/tam_encoder)","","        # 1. Calculamos las cuentas que tendra que pasar para girar hacia un stolado.","        # Si suponemos que un giro sobre si mismo es de de radio separationBewteenWheels, un giro solo ocupara una","        # cuarta parte del perimetro de la circunferencia.","\t\tself.turn_perimeter = (math.pi * 2.0 * self.separationBetweenWheels_) / 4.0","\t\tself.cuentasGiro_ = self.turn_perimeter / self.cuenta_","","","\tdef move(self, direction):","","\t\t# vState[0] mov+ vState[1] mov-\t","","\t\tif(direction == 1):","\t\t\tif(not self.vState[0] and not self.vState[1]):","\t\t\t\tself.power = 60","\t\t\tif(self.vState[1]):","\t\t\t\tself.power *= -1\t\t","","\t\t\tself.vState[0] = True","\t\t\tself.vState[1] = False","","\t\tif(direction == -1):","\t\t\tif(not self.vState[0] and not self.vState[1]):","\t\t\t\tself.power = -60","\t\t\tif(self.vState[0]):\t","\t\t\t\tself.power *= direction","","","\t\t\tself.vState[0] = False","\t\t\tself.vState[1] = True","\t\t","\t\tself.syncMotor.brake()","\t\tself.syncMotor.run(self.power)","","\t# Dependiendo de la direccion, acelera o decelera","\tdef speed(self, direction):","","\t\tif(self.vState[0]):\t","\t\t\tif(self.power < 120 and self.power > 0):","\t\t\t\tself.power = self.power + 5 * direction","\t\telif(self.vState[1]):","\t\t\tif(self.power < 0 and self.power > -120):","\t\t\t\tself.power = self.power - 5 * direction","\t\telse:","\t\t\treturn","\t\tself.syncMotor.brake()","\t\tself.syncMotor.run(self.power)","","\tdef turn(self, direction):","","\t\tif(direction == 1):","\t\t\tself.syncMotor.leader.weak_turn(80, self.cuentasGiro_)","\t\telse:","\t\t\tself.syncMotor.follower.weak_turn(80, self.cuentasGiro_)","","\tdef stop(self):","\t\tif(self.vState[0] or self.vState[1]):","\t\t\tself.vState[0] = self.vState[1] = False","\t\t\tself.syncMotor.brake()","\t\telse:","\t\t\tself.vState[0] = True","\t\t\tself.power = 60","\t\t\tself.syncMotor.run(self.power)\t",""]}]],"mark":100,"position":100},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":90,"column":0},"end":{"row":90,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":64,"state":"start","mode":"ace/mode/python"}},"timestamp":1430994799946,"hash":"274b6ad75620e1e8b2f7f6dee9b845a4faf52bd9"}